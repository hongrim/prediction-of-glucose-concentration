import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import KFold
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

# Perform 5-fold cross-validation
kf = KFold(n_splits=5, shuffle=True, random_state=42)
mse_scores = []

for train_index, test_index in kf.split(X_scaled): 
    X_train, X_test = X_scaled[train_index], X_scaled[test_index]
    y_train, y_test = y[train_index], y[test_index]

    # Fit the model on the training set
    best_model.fit(X_train, y_train)

    # Make predictions on the test set
    y_pred = best_model.predict(X_test)

    # Calculate mean squared error
    mse = mean_squared_error(y_test, y_pred)
    mse_scores.append(mse)

custom_colors = ['#7976A2', 
                 '#4A5E65',
                 '#E29957',
                 '#B95A58',
                 '#4292C6']

metrics = ['Fold 1', 'Fold 2', 'Fold 3', 'Fold 4', 'Fold 5']
plt.bar(metrics, mse_scores, color=custom_colors, edgecolor='black') 

plt.ylabel('MSE')

for spine in plt.gca().spines.values():
    spine.set_edgecolor('black')

plt.tick_params(axis='both', which='both', direction='out', bottom=True, top=False, left=True, right=False)

plt.grid(False)  

# Calculate standard deviation of MSE values
mse_std = np.std(mse_scores)

# Add error bars to the bar chart
plt.errorbar(metrics, mse_scores, yerr=mse_std, fmt='none', capsize=5, color='black')
plt.show()

mean_mse = np.mean(mse_scores)
print('Average MSE:', mean_mse)
