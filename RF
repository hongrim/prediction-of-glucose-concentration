import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import StandardScaler

file_path = r'inter.xlsx'
data = pd.read_excel(file_path)

X = data[['Z(f=100)','Z(f=1000)', 'Z(f=10000)',  'θ(f=100)',  'θ(f=10000)', 'Temperature', 'R contact']]
y = data['Concentration']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = RandomForestRegressor(
    n_estimators=200,
    max_depth=13,
    max_features=6,
    min_samples_split=2,
    min_samples_leaf=1,
    random_state=32
)

model.fit(X_train_scaled, y_train)
y_pred_train = model.predict(X_train_scaled)

y_pred_test = model.predict(X_test_scaled)

plt.figure(figsize=(5, 5))

color_test = (203/255, 148/255, 117/255)  

plt.scatter(y_test, y_pred_test, color=color_test, label='Test Data', s=15)
plt.scatter(y_train, y_pred_train, color='#8A7197', label='Train Data', s=15)

plt.xlabel('Actual Concentration')
plt.ylabel('Predicted Concentration')

plt.xticks([0, 50, 100, 150, 200, 250, 300, 350, 400])
plt.yticks([0, 50, 100, 150, 200, 250, 300, 350, 400])
plt.xlim(0, 400)
plt.ylim(0, 400)
plt.axis('equal')

plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='gray', linestyle='--')
plt.legend()

for spine in plt.gca().spines.values():
    spine.set_edgecolor('black')

plt.tick_params(axis='both', which='both', direction='out', bottom=True, top=False, left=True, right=False)

plt.grid(False)
plt.show()

train_mse = mean_squared_error(y_train, y_pred_train)
rf_mse = mean_squared_error(y_test, y_pred_test)
train_r2 = r2_score(y_train, y_pred_train)
rf_r2 = r2_score(y_test, y_pred_test)
rf_rmse = np.sqrt(rf_mse)
rf_mae = mean_absolute_error(y_test, y_test_pred)
rf_corr = np.corrcoef(y_test, y_test_pred)[0, 1]

print("Train Mean Squared Error (MSE):", train_mse)
print("Test Mean Squared Error (MSE):", rf_mse)
print("Train R^2 Score:", train_r2)
print("Test R^2 Score:", rf_r2)
print("Test CC:", rf_corr)
print("Test RMSE:", rf_rmse)
